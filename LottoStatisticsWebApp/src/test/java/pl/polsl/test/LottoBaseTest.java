/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/UnitTests/JUnit5TestClass.java to edit this template
 */
package pl.polsl.test;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import pl.polsl.model.LottoBaseException;
import pl.polsl.model.LottoBase;
import pl.polsl.model.SingleNumber;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

/**
 * Test class for LottoBase model
 *
 * @author Piotr Benio
 * @version 4.0
 */
public class LottoBaseTest {

    /**
     * Parametriezed Test for method responsible for generating and operating on
     * new random sets Test is going to check if all inside methods will return
     * correct values. All procedures will be handly made inside test and then
     * compared with results made by methods. Main base, frequency base and
     * percents will be checked. Test will also check if proper exceptions were thrown
     * where they should.
     *
     * @param amount is an argument representing inpud method value. By default,
     * it should be a number informing how many now winning sets should be
     * generated.
     * @throws NumberFormatException when input number is incorrect
     */
    @ParameterizedTest
    @ValueSource(ints = {-1, 0, 1, 100})
    public void testDoNewRandomWinningSetsProcedure(int amount) throws NumberFormatException {
        LottoBase instance = new LottoBase();
        ArrayList<SingleNumber> testBase;
        HashMap<Integer, Integer> testFrequency = new HashMap<>();
        HashMap<Integer, Integer> testPercentages = new HashMap<>();
        for (int i = 1; i <= 40; i++) {
            testFrequency.put(i, 0);
            testPercentages.put(i, 0);
        }
        try {
            instance.DoNewRandomWinningSetsProcedure(amount);
            testBase = instance.getAllDatabaseElements();
            int expectedSize;

            if (amount > 0) {
                expectedSize = (amount * 6);
            } else {
                expectedSize = 0;
            }
            assertEquals(expectedSize, testBase.size(), "Incorrect amount of numbers generated by method!");
            testBase.forEach(n -> assertTrue(n.getNumber() > 0 && n.getNumber() <= 40, "Invalid Lotto number value"));

            Integer newValue;
            Integer key;
            for (int i = 0; i < testBase.size(); i++) {
                key = (testBase.get(i)).getNumber();
                newValue = testFrequency.get(key);
                newValue++;
                testFrequency.put(key, newValue);
            }
            assertEquals(instance.getFrequency(), testFrequency, "Frequency container has different values than it should have");

            Integer percent;
            for (int i = 1; i <= testFrequency.size(); i++) {

                if (testFrequency.get(i) == 0) {
                    percent = 0;
                } else {
                    percent = (int) ((Double.valueOf(testFrequency.get(i)) / testBase.size()) * 100);
                }
                testPercentages.put(i, percent);
            }
            assertEquals(instance.getPercents(), testPercentages, "Percantages are calculated incorrectly");

   
        } catch (NumberFormatException exception) {
            System.out.print(exception);
            fail("Unhandled exception has been thrown, input is not an int value");
        }
    }

    /**
     * Test for method responsible for getting and saving data from database.
     * Data will be red both handly and with the method. Then, two databases
     * will be compared by every single element. Also, test will check if proper
     * exceptipns were thrown if database has incorrect data. In the end, length
     * of both databases will be compared to make sure their size is equal.
     *
     * @param filename
     * @throws FileNotFoundException when file is not existing
     * @throws LottoBaseException when wrong numbers are put in database
     */
    @ParameterizedTest
    @ValueSource(strings = {"data.txt", "rrr", "12345.txt", " ", ""})
    public void testGetDataFromDatabase(String filename) throws FileNotFoundException, LottoBaseException {

        LottoBase instance = new LottoBase();
        ArrayList<SingleNumber> testBase;
        SingleNumber testNumber = new SingleNumber();

        instance.setFilename(filename);
        if (filename == null) {
            fail("after setFilename method, filename can't be null");
        }

        assertEquals(filename, instance.getFilename(), "Filename has wrong name");

        File myObj = new File(filename);

        if (!myObj.exists()) {
            assertThrows(FileNotFoundException.class, () -> instance.getDataFromDatabase(), "Should have thrown an exception");
        } else {
            Scanner Reader = new Scanner(myObj);
            instance.getDataFromDatabase();
            testBase = instance.getAllDatabaseElements();
            int counter = 0;
            while (Reader.hasNextLine()) {
                testNumber.setNumber(Reader.nextInt());
                if (testNumber.getNumber() <= 40 && testNumber.getNumber() >= 1) {

                    assertEquals(testBase.get(counter).getNumber(), testNumber.getNumber(), "Wrong number has been saved");
                    counter++;
                } else {
                    fail("Exception should have been thrown while getting data to database");
                }
            }
            assertEquals(testBase.size(), counter, "Missing or additional numbers in base");
            Reader.close();

        }
    }

}
